name: ci-cd
on:
  pull_request:
  push:
    branches: [main]

jobs:
  test_and_build_front:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }
      - name: Install deps
        run: npm ci

      - name: Run tests (Vitest/Jest) with coverage
        run: |
          npm run test --if-present -- --coverage --run

      - name: SonarCloud scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          projectBaseDir: .

      - name: Build app (for local verification)
        run: npm run build

  build_and_push_image:
    needs: [test_and_build_front]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ github.sha }}
          provenance: true

  deploy_to_vps:
    needs: [build_and_push_image]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.2.0
        env:
          GHCR_USER: ${{ github.actor }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}          # PAT с read:packages (если образ приватный)
          GITHUB_TOKEN_FALLBACK: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}              # ubuntu
          key: ${{ secrets.VPS_SSH_KEY }}                # или key_path: key.pem, если делаешь через base64
          envs: GHCR_USER,GHCR_TOKEN,GITHUB_TOKEN_FALLBACK
          script_stop: true
          script: |
            set -euo pipefail
            APP_DIR=/root/crypto-signal-desk

            # git/acl
            if ! command -v git >/dev/null 2>&1 || ! command -v setfacl >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y git acl
            fi

            # доступ в /root и каталог проекта
            sudo setfacl -m u:$(id -un):--x /root || true
            sudo mkdir -p "$APP_DIR"
            sudo chown -R $(id -un):$(id -gn) "$APP_DIR"

            # если в каталоге нет git-репозитория — пересоздадим
            if ! git -C "$APP_DIR" rev-parse --is-inside-work-tree >/dev/null 2>&1; then
              if [ "$(ls -A "$APP_DIR" 2>/dev/null | wc -l)" -gt 0 ]; then
                ts=$(date +%Y%m%d-%H%M%S)
                echo "APP_DIR не git-репо и не пустой. Бэкап: ${APP_DIR}.bak-$ts"
                sudo mv "$APP_DIR" "${APP_DIR}.bak-$ts"
                sudo mkdir -p "$APP_DIR"
                sudo chown -R $(id -un):$(id -gn) "$APP_DIR"
              fi
              git clone https://github.com/${{ github.repository }}.git "$APP_DIR"
            fi

            cd "$APP_DIR"
            git fetch origin main
            git reset --hard origin/main

            # docker (sudo при необходимости)
            if docker ps >/dev/null 2>&1; then DOCKER="docker"; else DOCKER="sudo docker"; fi

            # логин в GHCR (если образ приватный). Если GHCR_TOKEN пуст — используем GITHUB_TOKEN_FALLBACK
            TOKEN="${GHCR_TOKEN:-$GITHUB_TOKEN_FALLBACK}"
            if [ -n "$TOKEN" ]; then
              $DOCKER login ghcr.io -u "$GHCR_USER" -p "$TOKEN" || true
            fi

            # тянем образ и поднимаем (compose-файл должен быть в репо и ссылаться на ghcr.io/…:latest)
            $DOCKER compose pull || true
            $DOCKER compose up -d
            $DOCKER image prune -f
